; ModuleID = 'my cool jit'
source_filename = "my cool jit"

define i32 @pow(i32 %a, i32 %b) {
entry:
  %b2 = alloca i32, align 4
  %a1 = alloca i32, align 4
  store i32 %a, i32* %a1, align 4
  store i32 %b, i32* %b2, align 4
  %prod = alloca i32, align 4
  store i32 1, i32* %prod, align 4
  br label %pre

pre:                                              ; preds = %entry
  %i = alloca i32, align 4
  store i32 1, i32* %i, align 4
  %i3 = load i32, i32* %i, align 4
  %b4 = load i32, i32* %b2, align 4
  %lecmptmp = icmp sle i32 %i3, %b4
  br i1 %lecmptmp, label %loop, label %after

loop:                                             ; preds = %loop, %pre
  %prod5 = load i32, i32* %prod, align 4
  %prod6 = load i32, i32* %prod, align 4
  %a7 = load i32, i32* %a1, align 4
  %multmp = mul i32 %prod6, %a7
  store i32 %multmp, i32* %prod, align 4
  %i8 = load i32, i32* %i, align 4
  %i9 = load i32, i32* %i, align 4
  %addtmp = add i32 %i9, 1
  store i32 %addtmp, i32* %i, align 4
  %i10 = load i32, i32* %i, align 4
  %b11 = load i32, i32* %b2, align 4
  %lecmptmp12 = icmp sle i32 %i10, %b11
  br i1 %lecmptmp12, label %loop, label %after

after:                                            ; preds = %loop, %pre
  %prod13 = load i32, i32* %prod, align 4
  ret i32 %prod13
}

define i32 @readInt32() {
entry:
  ret i32 5
}

define void @printd(i32 %val) {
entry:
  %val1 = alloca i32, align 4
  store i32 %val, i32* %val1, align 4
  ret void
}

define i32 @func(i32 %N, i32 %k) {
entry:
  %k2 = alloca i32, align 4
  %N1 = alloca i32, align 4
  store i32 %N, i32* %N1, align 4
  store i32 %k, i32* %k2, align 4
  %sum = alloca i32, align 4
  store i32 0, i32* %sum, align 4
  br label %pre

pre:                                              ; preds = %entry
  %i = alloca i32, align 4
  store i32 1, i32* %i, align 4
  %i3 = load i32, i32* %i, align 4
  %N4 = load i32, i32* %N1, align 4
  %lecmptmp = icmp sle i32 %i3, %N4
  br i1 %lecmptmp, label %loop, label %after

loop:                                             ; preds = %loop, %pre
  %sum5 = load i32, i32* %sum, align 4
  %sum6 = load i32, i32* %sum, align 4
  %i7 = load i32, i32* %i, align 4
  %i8 = load i32, i32* %i, align 4
  %k9 = load i32, i32* %k2, align 4
  %calltmp = call i32 @pow(i32 %i8, i32 %k9)
  %multmp = mul i32 %i7, %calltmp
  %addtmp = add i32 %sum6, %multmp
  store i32 %addtmp, i32* %sum, align 4
  %i10 = load i32, i32* %i, align 4
  %i11 = load i32, i32* %i, align 4
  %addtmp12 = add i32 %i11, 1
  store i32 %addtmp12, i32* %i, align 4
  %i13 = load i32, i32* %i, align 4
  %N14 = load i32, i32* %N1, align 4
  %lecmptmp15 = icmp sle i32 %i13, %N14
  br i1 %lecmptmp15, label %loop, label %after

after:                                            ; preds = %loop, %pre
  %sum16 = load i32, i32* %sum, align 4
  ret i32 %sum16
}

define void @main() {
entry:
  %N = alloca i32, align 4
  %calltmp = call i32 @readInt32()
  store i32 %calltmp, i32* %N, align 4
  %k = alloca i32, align 4
  %calltmp1 = call i32 @readInt32()
  store i32 %calltmp1, i32* %k, align 4
  %N2 = load i32, i32* %N, align 4
  %k3 = load i32, i32* %k, align 4
  %calltmp4 = call i32 @func(i32 %N2, i32 %k3)
  call void @printd(i32 %calltmp4)
  ret void
}
